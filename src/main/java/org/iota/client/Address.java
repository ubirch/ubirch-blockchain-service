// Automatically generated by flapigen
package org.iota.client;


public final class Address {
    @Override
    public String toString() {
        return this.to_string();
    }


    private Address() {}

    private final String to_string() {
        String ret = do_to_string(mNativeObj);

        return ret;
    }
    private static native String do_to_string(long self);
    /**
     * Tries to create an `Address` from a Bech32 encoded string.
     */
    public static Address try_from_bech32(String addr) {
        long ret = do_try_from_bech32(addr);
        Address convRet = new Address(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_try_from_bech32(String addr);

    public final String to_bech32(String hrp) {
        String ret = do_to_bech32(mNativeObj, hrp);

        return ret;
    }
    private static native String do_to_bech32(long self, String hrp);

    public final void verify(byte [] msg, SignatureUnlock signature) {
        long a1 = signature.mNativeObj;
        signature.mNativeObj = 0;

        do_verify(mNativeObj, msg, a1);

        JNIReachabilityFence.reachabilityFence1(signature);
    }
    private static native void do_verify(long self, byte [] msg, long signature);

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ Address(InternalPointerMarker marker, long ptr) {
        assert marker == InternalPointerMarker.RAW_PTR;
        this.mNativeObj = ptr;
    }
    /*package*/ long mNativeObj;
}