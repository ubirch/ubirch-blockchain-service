// Automatically generated by flapigen
package org.iota.client;


public final class MessagePayload {
    @Override
    public String toString() {
        return this.to_string();
    }


    private MessagePayload() {}

    private final String to_string() {
        String ret = do_to_string(mNativeObj);

        return ret;
    }
    private static native String do_to_string(long self);
    /**
     * Turns a serialized message payload string back into its class
     */
    public static MessagePayload deserialize(String serialised_data) {
        long ret = do_deserialize(serialised_data);
        MessagePayload convRet = new MessagePayload(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_deserialize(String serialised_data);
    /**
     * Get the type of message this contains (used to select the correct getter)
     */
    public final MessagePayloadType payloadType() {
        int ret = do_payloadType(mNativeObj);
        MessagePayloadType convRet = MessagePayloadType.fromInt(ret);

        return convRet;
    }
    private static native int do_payloadType(long self);

    public final java.util.Optional<IndexationPayload> getAsIndexation() {
        long ret = do_getAsIndexation(mNativeObj);
        java.util.Optional<IndexationPayload> convRet;
        if (ret != 0) {
            convRet = java.util.Optional.of(new IndexationPayload(InternalPointerMarker.RAW_PTR, ret));
        } else {
            convRet = java.util.Optional.empty();
        }

        return convRet;
    }
    private static native long do_getAsIndexation(long self);

    public final java.util.Optional<TransactionPayload> getAsTransaction() {
        long ret = do_getAsTransaction(mNativeObj);
        java.util.Optional<TransactionPayload> convRet;
        if (ret != 0) {
            convRet = java.util.Optional.of(new TransactionPayload(InternalPointerMarker.RAW_PTR, ret));
        } else {
            convRet = java.util.Optional.empty();
        }

        return convRet;
    }
    private static native long do_getAsTransaction(long self);

    public final java.util.Optional<TreasuryPayload> getAsTreasury() {
        long ret = do_getAsTreasury(mNativeObj);
        java.util.Optional<TreasuryPayload> convRet;
        if (ret != 0) {
            convRet = java.util.Optional.of(new TreasuryPayload(InternalPointerMarker.RAW_PTR, ret));
        } else {
            convRet = java.util.Optional.empty();
        }

        return convRet;
    }
    private static native long do_getAsTreasury(long self);

    public final java.util.Optional<MilestonePayload> getAsMilestone() {
        long ret = do_getAsMilestone(mNativeObj);
        java.util.Optional<MilestonePayload> convRet;
        if (ret != 0) {
            convRet = java.util.Optional.of(new MilestonePayload(InternalPointerMarker.RAW_PTR, ret));
        } else {
            convRet = java.util.Optional.empty();
        }

        return convRet;
    }
    private static native long do_getAsMilestone(long self);

    public final java.util.Optional<ReceiptPayload> getAsReceipt() {
        long ret = do_getAsReceipt(mNativeObj);
        java.util.Optional<ReceiptPayload> convRet;
        if (ret != 0) {
            convRet = java.util.Optional.of(new ReceiptPayload(InternalPointerMarker.RAW_PTR, ret));
        } else {
            convRet = java.util.Optional.empty();
        }

        return convRet;
    }
    private static native long do_getAsReceipt(long self);
    /**
     * Serializes the message payload into a json string
     */
    public final String serialize() {
        String ret = do_serialize(mNativeObj);

        return ret;
    }
    private static native String do_serialize(long self);

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ MessagePayload(InternalPointerMarker marker, long ptr) {
        assert marker == InternalPointerMarker.RAW_PTR;
        this.mNativeObj = ptr;
    }
    /*package*/ long mNativeObj;
}