flush = ${BLOCKCHAIN_SVC_FLUSH}

blockchainAnchoring {

  namespace = "gov-digital"
  processor = "com.ubirch.models.BlockchainProcessors.EthereumProcessor"
  gov-digital {
    url = ${BLOCKCHAIN_SVC_ETH_NODE_URL}
    credentialsPathAndFileName = ${BLOCKCHAIN_SVC_ETH_CREDENTIALS_FILE}
    password = ${BLOCKCHAIN_SVC_ETH_PASSWORD}
    toAddress = ${BLOCKCHAIN_SVC_ETH_ADDRESS}
    gasPrice = ${BLOCKCHAIN_SVC_ETH_GAS_PRICE}
    gasLimit = ${BLOCKCHAIN_SVC_ETH_GAS_LIMIT}
    networkInfo = ${BLOCKCHAIN_SVC_ETH_NETWORK_INFO}
    networkType = ${BLOCKCHAIN_SVC_ETH_NETWORK_TYPE}
    chainId = -1
    defaultSleepMillisForReceipt = ${BLOCKCHAIN_SVC_ETH_DEFAULT_SLEEP_MILLIS_RECEIPT}
    maxReceiptAttempts = ${BLOCKCHAIN_SVC_ETH_MAX_RECEIPT_ATTEMPTS}
    checkBalanceEveryInSeconds = ${BLOCKCHAIN_SVC_ETH_BALANCE_CHECK_EVERY}
    windowSize = ${BLOCKCHAIN_SVC_ETH_WINDOW_SIZE}
    stepUpPercentage = ${BLOCKCHAIN_SVC_ETH_STEP_UP_PERCENTAGE}
    stepDownPercentage = ${BLOCKCHAIN_SVC_ETH_STEP_DOWN_PERCENTAGE}
    durationLimit = ${BLOCKCHAIN_SVC_ETH_DURATION_LIMIT} //in nano seconds
    stepDownPercentageAFT = ${BLOCKCHAIN_SVC_ETH_STEP_DOWN_PERCENTAGE_AFT}
    maxStepsDownAFT = ${BLOCKCHAIN_SVC_ETH_MAX_STEPS_DOWN_AFT} //steps down after time out
    calcType = ${BLOCKCHAIN_SVC_ETH_CALC_TYPE}
  }

  kafkaConsumer {
    //Comma-separated values of IP/Hostname and ports
    bootstrapServers = ${BLOCKCHAIN_SVC_KFC_NODES}
    topics = ${BLOCKCHAIN_SVC_KFC_TOPICS}
    //If empty, a group id will be created.
    groupId = ${blockchainAnchoring.namespace}_group
    gracefulTimeout = 2 //In Seconds
    maxPollRecords = 1
    metricsSubNamespace = ${blockchainAnchoring.namespace}
    fetchMaxBytesConfig = ${BLOCKCHAIN_SVC_KFC_FETCH_MAX_BYTES_CONFIG}
    maxPartitionFetchBytesConfig = ${BLOCKCHAIN_SVC_KFC_MAX_PARTITION_FETCH_BYTES_CONFIG}
    reconnectBackoffMsConfig = ${BLOCKCHAIN_SVC_KFC_RECONNECT_BACKOFF_MS_CONFIG}
    reconnectBackoffMaxMsConfig = ${BLOCKCHAIN_SVC_KFC_RECONNECT_BACKOFF_MAX_MS_CONFIG}
    maxTimeAggregationSeconds = ${BLOCKCHAIN_SVC_KFC_MAX_TIME_AGGREGATION_SECONDS}
  }

  kafkaProducer {
    lingerMS = ${BLOCKCHAIN_SVC_KFP_LINGER_MS}
    //Comma-separeted values of IP/Hostname and ports
    bootstrapServers = ${BLOCKCHAIN_SVC_KFP_NODES}
    topics = ${BLOCKCHAIN_SVC_KFP_TOPICS}
    errorTopic = ${BLOCKCHAIN_SVC_KFP_ERROR_TOPIC}
  }

  metrics {
    prometheus {
      port = ${BLOCKCHAIN_SVC_PROM_HTTP_PORT}
    }
  }

}
