include "application.base.conf"
include "iota.base.conf"

flush = ${BLOCKCHAIN_SVC_FLUSH}

blockchainAnchoring {

  iota {
    url = ${BLOCKCHAIN_SVC_IOTA_NODE_URL}
    toAddress = ${BLOCKCHAIN_SVC_IOTA_ADDRESS}
    toAddressChecksum = ${BLOCKCHAIN_SVC_IOTA_CHECKSUM}
    networkInfo = ${BLOCKCHAIN_SVC_IOTA_NETWORK_INFO}
    networkType = ${BLOCKCHAIN_SVC_IOTA_NETWORK_TYPE}
    depth = ${BLOCKCHAIN_SVC_IOTA_DEPTH}
    seed = ${BLOCKCHAIN_SVC_IOTA_SEED}
    securityLevel = ${BLOCKCHAIN_SVC_IOTA_SECURITY_LEVEL}
    //For production, we may need 14, for dev is OK 9
    minimumWeightMagnitude = ${BLOCKCHAIN_SVC_IOTA_MINIMUM_WEIGHT_MAGNITUDE}
    //27 CHARACTERS, IF NOT COMPLETE, FILL WITH 9999
    tag = "UBIRCH999999999999999999999"
    createIOTATransferTree = ${BLOCKCHAIN_SVC_IOTA_CREATE_IOTATRANSFER_TREE}
  }

  kafkaConsumer {
    //Comma-separeted values of IP/Hostname and ports
    bootstrapServers = ${BLOCKCHAIN_SVC_KFC_NODES}
    topics = ${BLOCKCHAIN_SVC_KFC_TOPICS}
    //If empty, a group id will be created.
    groupId = ${blockchainAnchoring.namespace}_group
    gracefulTimeout = 2 //In Seconds
    maxPollRecords = 1
    metricsSubNamespace = ${blockchainAnchoring.namespace}
    fetchMaxBytesConfig = ${BLOCKCHAIN_SVC_KFC_FETCH_MAX_BYTES_CONFIG}
    maxPartitionFetchBytesConfig = ${BLOCKCHAIN_SVC_KFC_MAX_PARTITION_FETCH_BYTES_CONFIG}
    reconnectBackoffMsConfig = ${BLOCKCHAIN_SVC_KFC_RECONNECT_BACKOFF_MS_CONFIG}
    reconnectBackoffMaxMsConfig = ${BLOCKCHAIN_SVC_KFC_RECONNECT_BACKOFF_MAX_MS_CONFIG}
  }

  kafkaProducer {
    lingerMS = ${BLOCKCHAIN_SVC_KFP_LINGER_MS}
    //Comma-separeted values of IP/Hostname and ports
    bootstrapServers = ${BLOCKCHAIN_SVC_KFP_NODES}
    topics = ${BLOCKCHAIN_SVC_KFP_TOPICS}
    errorTopic = ${BLOCKCHAIN_SVC_KFP_ERROR_TOPIC}
  }

  metrics {
    prometheus {
      port = ${BLOCKCHAIN_SVC_PROM_HTTP_PORT}
    }
  }

}
