include "application.base.conf"
include "ethereum.base.conf"

blockchainAnchoring {

  ethereum {
    url = ${BLOCKCHAIN_SVC_ETH_NODE_URL}
    credentialsPathAndFileName = ${BLOCKCHAIN_SVC_ETH_CREDENTIALS_FILE}
    password = ${BLOCKCHAIN_SVC_ETH_PASSWORD}
    toAddress = ${BLOCKCHAIN_SVC_ETH_ADDRESS}
    gasPrice = ${BLOCKCHAIN_SVC_ETH_GAS_PRICE}
    gasLimit = ${BLOCKCHAIN_SVC_ETH_LIMIT}
    networkInfo = ${BLOCKCHAIN_SVC_ETH_NETWORK_INFO}
    networkType = ${BLOCKCHAIN_SVC_ETH_NETWORK_TYPE}
    chainId = ${BLOCKCHAIN_SVC_ETH_CHAIN_ID}
    defaultSleepMillisForReceipt = ${BLOCKCHAIN_SVC_ETH_DEFAULT_SLEEP_MILLIS_RECEIPT}
    maxReceiptAttempts = ${BLOCKCHAIN_SVC_ETH_MAX_RECEIPT_ATTEMPTS}
    checkBalanceEveryInSeconds = ${BLOCKCHAIN_SVC_ETH_BALANCE_CHECK_EVERY}
  }

  kafkaConsumer {
    //Comma-separeted values of IP/Hostname and ports
    bootstrapServers = ${BLOCKCHAIN_SVC_KFC_NODES}
    topics = ${BLOCKCHAIN_SVC_KFC_TOPICS}
    //If empty, a group id will be created.
    groupId = ${blockchainAnchoring.type}_group
    gracefulTimeout = 2 //In Seconds
    maxPollRecords = 1
    metricsSubNamespace = ${blockchainAnchoring.type}
    fETHhMaxBytesConfig = ${BLOCKCHAIN_SVC_KFC_FETHH_MAX_BYTES_CONFIG}
    maxPartitionFETHhBytesConfig = ${BLOCKCHAIN_SVC_KFC_MAX_PARTITION_FETHH_BYTES_CONFIG}
    reconnectBackoffMsConfig = ${BLOCKCHAIN_SVC_KFC_RECONNECT_BACKOFF_MS_CONFIG}
    reconnectBackoffMaxMsConfig = ${BLOCKCHAIN_SVC_KFC_RECONNECT_BACKOFF_MAX_MS_CONFIG}
  }

  kafkaProducer {
    lingerMS = ${BLOCKCHAIN_SVC_KFP_LINGER_MS}
    //Comma-separeted values of IP/Hostname and ports
    bootstrapServers = ${BLOCKCHAIN_SVC_KFP_NODES}
    topic = ${BLOCKCHAIN_SVC_KFP_TOPICS}
    errorTopic = ${BLOCKCHAIN_SVC_KFP_ERROR_TOPIC}
  }

  metrics {
    prometheus {
      port = ${BLOCKCHAIN_SVC_PROM_HTTP_PORT}
    }
  }

}

