include "application.base.conf"
include "bloxberg.base.conf"

flush = ${BLOCKCHAIN_SVC_FLUSH}

blockchainAnchoring {

  bloxberg {
    url = ${BLOCKCHAIN_SVC_BLB_NODE_URL}
    credentialsPathAndFileName = ${BLOCKCHAIN_SVC_BLB_CREDENTIALS_FILE}
    password = ${BLOCKCHAIN_SVC_BLB_PASSWORD}
    toAddress = ${BLOCKCHAIN_SVC_BLB_ADDRESS}
    networkInfo = ${BLOCKCHAIN_SVC_BLB_NETWORK_INFO}
    networkType = ${BLOCKCHAIN_SVC_BLB_NETWORK_TYPE}
    chainId = ${BLOCKCHAIN_SVC_BLB_CHAIN_ID}
    defaultSleepMillisForReceipt = ${BLOCKCHAIN_SVC_BLB_DEFAULT_SLEEP_MILLIS_RECEIPT}
    maxReceiptAttempts = ${BLOCKCHAIN_SVC_BLB_MAX_RECEIPT_ATTEMPTS}
    checkBalanceEveryInSeconds = ${BLOCKCHAIN_SVC_BLB_BALANCE_CHECK_EVERY}
    windowSize = ${BLOCKCHAIN_SVC_BLB_WINDOW_SIZE}
  }

  kafkaConsumer {
    //Comma-separated values of IP/Hostname and ports
    bootstrapServers = ${BLOCKCHAIN_SVC_KFC_NODES}
    topics = ${BLOCKCHAIN_SVC_KFC_TOPICS}
    //If empty, a group id will be created.
    groupId = ${blockchainAnchoring.namespace}_group
    gracefulTimeout = 2 //In Seconds
    maxPollRecords = 1
    metricsSubNamespace = ${blockchainAnchoring.namespace   }
    fetchMaxBytesConfig = ${BLOCKCHAIN_SVC_KFC_FETCH_MAX_BYTES_CONFIG}
    maxPartitionFetchBytesConfig = ${BLOCKCHAIN_SVC_KFC_MAX_PARTITION_FETCH_BYTES_CONFIG}
    reconnectBackoffMsConfig = ${BLOCKCHAIN_SVC_KFC_RECONNECT_BACKOFF_MS_CONFIG}
    reconnectBackoffMaxMsConfig = ${BLOCKCHAIN_SVC_KFC_RECONNECT_BACKOFF_MAX_MS_CONFIG}
    maxTimeAggregationSeconds = ${BLOCKCHAIN_SVC_KFC_MAX_TIME_AGGREGATION_SECONDS}
  }

  kafkaProducer {
    lingerMS = ${BLOCKCHAIN_SVC_KFP_LINGER_MS}
    //Comma-separeted values of IP/Hostname and ports
    bootstrapServers = ${BLOCKCHAIN_SVC_KFP_NODES}
    topics = ${BLOCKCHAIN_SVC_KFP_TOPICS}
    errorTopic = ${BLOCKCHAIN_SVC_KFP_ERROR_TOPIC}
  }

  metrics {
    prometheus {
      port = ${BLOCKCHAIN_SVC_PROM_HTTP_PORT}
    }
  }

}

